import numpy as np

def stepRK4(x0, field, p, dt, costate=None):
    # Step solution forward
    k1 = field(x0, p, costate) * dt
    tmp = k1 * 0.5 + x0
    
    k2 = field(tmp, p, costate) * dt
    tmp = k2 * 0.5 + x0
    
    k3 = field(tmp, p, costate) * dt
    tmp = k3 + x0

    k4 = field(tmp, p, costate) * dt
    tmp = (k1 + 2*k2 + 2*k3 + k4) / 6
    
    return x0 + tmp


def propagate(x0, field, p, scheme, dt, nt):
    '''Propagate solution of ODE according to the vector field field \
    with Euler scheme from x0 for nt time steps of size dt.'''
    xt = np.empty((nt, x0.shape[0]))
    xt[0] = x0.copy()
    for t in np.arange(1, nt):
        xt[t] = scheme(xt[t-1], field, p, dt)
        
    return xt

def propagateFundamental(x0, field, M0, JacField, p, scheme, dt, nt):
    '''Propagate solution of ODE according to the vector field field \
    with Euler scheme from x0 for nt time steps of size dt.'''
    dim = x0.shape[0]
    xt = np.empty((nt, dim))
    Mt = np.empty((nt, dim, dim))
    xt[0] = x0.copy()
    Mt[0] = M0.copy()
    for t in np.arange(1, nt):
        xt[t] = scheme(xt[t-1], field, p, dt)
        for d in np.arange(dim):
            Mt[t, :, d] = scheme(Mt[t - 1, :, d], JacField, p, dt, xt[t-1])
        
    return (xt, Mt)

def getPeriod(xt, step=1):
    # Check for fixed point
    if np.sum((xt[-2] - xt[-1])**2) < 1.e-8:
        T, dist0 = 0., 0.
    else:
        nt = xt.shape[0]
        dist0 = np.sum((xt - xt)**2) / nt
        distp1 = np.sum((xt[step:] - xt[:-step])**2) / (nt - step)
        for t in np.arange(1, nt-step):
            distm1 = dist0
            dist0 = distp1
            distp1 = np.sum((xt[t+step:] - xt[:-(t+step)])**2) \
                     / (nt - (t+step))
            if (dist0 < distm1) & (dist0 < distp1):
                break
        T = t
    
    return (T, dist0)



