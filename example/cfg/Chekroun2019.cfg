general:
{
	# Results directory
	resDir = "../results/";
	plotDir = "../results/plot/";
	# Output file format:
 	fileFormat = "bin";
	#fileFormat = "txt";
};

model:	
{
	# Case name to define files:
	caseName = "Chekroun2019";
	# Dimension of the model (time series):
	dim = 3;
	beta = 0.;	
	delta = 0.;	
	# Case I
	mu = 0.001;
	alpha = 0.056;
	gamma = 100.;
	eps = 0.55;
	sep = 0.0001; 
	# sep = 0.01;
	# # Case IV
	# mu = 0.001;
	# alpha = 1.;
	# gamma = 10.;
	# eps = 0.3;
	# sep = 0.0001; 
	# # sep = 10.;
};

simulation:
{
	# Initial constant state:
	initState = [0., 0.01];
	# Time series length without spinup
	LCut = 10000.;
	spinup = 1000.;
	# LCut = 1000.;
	# spinup = 100.;
	# Time step of integration
	#dt = 0.01;
	dt = 0.00001;
	# Time step between prints
	printStep = 0.001;
};

sprinkle:
{
	nTraj = 8;
	minInitState = [-4., -4., 0.];
	maxInitState = [4., 4., 32.];
};

observable:
{
	# Components of the time series:
	components = [0, 1];
	# Eventual delay of each component to embed (days):
	embeddingDays = [0., 0.];
};

grid:
{
	readGridMem = false;
#	readGridMem = true;
	gridLimitsType = "fix";
	# Number of boxes in each direction and stand. dev. to span away from the mean state:
	# nx = [100, 100];
	nx = [200, 200];
};

transfer:
{
	# Lags for the transition matrix:
	tauRng = [0.001, 0.01, 0.011];
	stationary = true;
};

spectrum:
{
	# Number of eigenvalues to look for:
	nev = 200;
	maxit = 1000;
	tol = 1.e-15;
	getForwardEigenvectors = true;
	getBackwardEigenvectors = true;
	makeBiorthonormal = false;
	nEigVecPlot = 4;
	plotBackward = True
	plotImag = False     
	#plotImag = True     
};

stat:
{
	# Lag of the transition matrix for which to plot
	tauPlot = 0.001;
	# Components to use as observables:
	idxf = 0;
	idxg = 0;
	# Maximum lag used to calculate the correlation function:
	lagMax = 10;
	# Multi-taper window used to calculate periodograms:
	chunkWidth = 100;
	# Limits for periodogram plot:
	angFreqMax = 1000.;
	rateMax = 0.04;
	powerMin = 1.e-3;
	powerMax = 1.e3;
	maxCondition = 50
	norm = False
};

continuation:
{
	epsDist = 1.e-10;
	epsStepCorrSize = 1.e-8;
	maxIter = 1000;
	maxPred = 50;
	numShoot = 1;
	#numShoot = 10;
	#numShoot = 20;
	contStep = 0.01;
	#contStep = 0.0001;
	contMin = -5.;
	contMax = 5.;
	#verbose = true;
	verbose = false;
	# Radiative equilibrium fixed point continuation
	#initCont = [0., 0., 0., 0.];
	# Periodic orbit continuation
	initCont = [0.1, 0., 0., 1.];
};
